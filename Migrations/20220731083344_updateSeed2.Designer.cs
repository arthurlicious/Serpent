// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SerpantWebApp.Data;

namespace SerpantWebApp.Migrations
{
    [DbContext(typeof(SerpantWebAppContext))]
    [Migration("20220731083344_updateSeed2")]
    partial class updateSeed2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.27")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("SerpantWebApp.Models.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IPAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "fab4fac1-c546-41de-aebc-a14da6895711",
                            ConcurrencyStamp = "1",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Admin",
                            NormalizedName = "Admin"
                        },
                        new
                        {
                            Id = "c7b013f0-5201-4317-abd8-c211f91b7330",
                            ConcurrencyStamp = "2",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Teacher",
                            NormalizedName = "Teacher"
                        },
                        new
                        {
                            Id = "rewefac1-c53d-434f-a5gz-pet32gg95711",
                            ConcurrencyStamp = "3",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Student",
                            NormalizedName = "Student"
                        });
                });

            modelBuilder.Entity("SerpantWebApp.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "b74ddd14-6340-4840-95c2-db12884843e5",
                            AccessFailedCount = 0,
                            Age = 0,
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "5215bd11-52ba-4d40-a4f0-4cf1f7d54f9d",
                            Email = "petertestacct3010@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "petertestacct3010@gmail.com",
                            NormalizedUserName = "petertestacct3010@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEM+gW8p1caDuEUreuATJJA5K5FEiFRQomNoZOiSG6efcWOxxQS0a5YsEr3QZIao+Hg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e5a2bce7-2f83-489d-8ba5-d02cb38d8b19",
                            TwoFactorEnabled = false,
                            UserName = "petertestacct3010@gmail.com"
                        },
                        new
                        {
                            Id = "c15eeds50-9053-4323-53de23-dw32435f33",
                            AccessFailedCount = 0,
                            Age = 0,
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "fd0d459e-6fe7-4734-86aa-0b44654766d3",
                            Email = "jamesTestAcct3010@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "jamesTestAcct3010@gmail.com",
                            NormalizedUserName = "jamesTestAcct3010@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEPc/lRowBSTLB17DABySne79lUPjr0r05sYOYL1u316pmHTYdyK+61yWhx/h2eh4Xg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d96948f6-184f-4622-8756-2205e45042ac",
                            TwoFactorEnabled = false,
                            UserName = "jamesTestAcct3010@gmail.com"
                        },
                        new
                        {
                            Id = "rtweetwe1-3gre-yop2-verbm-rwerreww433",
                            AccessFailedCount = 0,
                            Age = 0,
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "d2b6d620-f1ab-446b-9901-db45facacc72",
                            Email = "alexander@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "alexander@gmail.com",
                            NormalizedUserName = "alexander@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEER1NfIxUyV4eweR05c/lvx8jqB6WjiF6IGUD+CF+NvNFCtWZFGYI+QoxJfH1BYatQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cba31498-7be0-4110-a4ff-528eb267ff6f",
                            TwoFactorEnabled = false,
                            UserName = "alexander@gmail.com"
                        },
                        new
                        {
                            Id = "rrtetrere-f32g-s42q-f3232f-ecdsvd32433",
                            AccessFailedCount = 0,
                            Age = 0,
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "109d6cd7-a041-43b7-b806-70724720bdda",
                            Email = "mike@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "mike@gmail.com",
                            NormalizedUserName = "mike@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEACHUwSJykglulm7YZ3KcJHVh7zPRHTx1lK3ysa+J4m5Nail7Ck8TmOIiWELpTN0mw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f5e61ff7-0165-4bb0-a1b8-89dbf9dc74a0",
                            TwoFactorEnabled = false,
                            UserName = "mike@gmail.com"
                        },
                        new
                        {
                            Id = "effin2343-3fzz-tg3f-2fsa3-eccafwee32433",
                            AccessFailedCount = 0,
                            Age = 0,
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "43eb2336-78ae-4b12-9be0-da07fc026cdb",
                            Email = "bob@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "bob@gmail.com",
                            NormalizedUserName = "bob@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEMr8LnPfNQWuib79glFVnPJPH8A6sNvtfk4kaLCxxWzWHmDXRS39cgKhp7GDXHj7ug==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "45a95667-7841-47bd-929e-b5dce6a65898",
                            TwoFactorEnabled = false,
                            UserName = "bob@gmail.com"
                        },
                        new
                        {
                            Id = "34dfwef33-y525f-h432-r32-evvvreze32433",
                            AccessFailedCount = 0,
                            Age = 0,
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "143a39dd-164a-49cd-9e30-d7130b9a3974",
                            Email = "hansel@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "hansel@gmail.com",
                            NormalizedUserName = "hansel@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEKFxGIxZiWSaeJ5YekGnTb+yHH4uciIvJXLKvy7dCVoHFPL3Aa703aG8l75AmA5j6Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "92926d45-d6dc-47d1-bdf5-03f960c811a6",
                            TwoFactorEnabled = false,
                            UserName = "hansel@gmail.com"
                        },
                        new
                        {
                            Id = "fet434t34-fwe3d-tu34f-fwe-owepopwefpf2423",
                            AccessFailedCount = 0,
                            Age = 0,
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "424294d2-4493-49dd-a916-50529cbc58a5",
                            Email = "grethel@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "grethel@gmail.com",
                            NormalizedUserName = "grethel@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEBuxJ6PAwuXbdYDYgtKDE2eh/LqEl8NObzSSi5unOvDH8Mqt8w9lOvlVB1tfjAQ5vg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f781c034-59cc-4f25-b074-5dbe749dc940",
                            TwoFactorEnabled = false,
                            UserName = "grethel@gmail.com"
                        },
                        new
                        {
                            Id = "zdmmdf34-fewf3-geg2353-ppoe-fwekkv32ife",
                            AccessFailedCount = 0,
                            Age = 0,
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "e8244161-5001-4e03-8a90-6a2ce3171558",
                            Email = "saiful@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "saiful@gmail.com",
                            NormalizedUserName = "saiful@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEFBZAaYqp4f2zGtcjnJIzL9Y2kUMJClDR/5y+FEQ/v2upAxe81KGacgUvKuWZWi9TQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "89610378-c06e-4f7f-8b1d-07f97bf8238e",
                            TwoFactorEnabled = false,
                            UserName = "saiful@gmail.com"
                        },
                        new
                        {
                            Id = "vre4yw-h563-g34y45h-fewf32-pqpfowef3",
                            AccessFailedCount = 0,
                            Age = 0,
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "1efac528-921b-43e5-9f9f-9eb9b1ad54ad",
                            Email = "charis@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "charis@gmail.com",
                            NormalizedUserName = "charis@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEBLdT6w4iK5K60fRNG9skjxc0g8/4OQ/wHlBVIWAJ5hGQSeJzRWo6hkqU73EQFOAxQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a95d85d9-ada4-4158-a36e-ef5ef8fb1cb5",
                            TwoFactorEnabled = false,
                            UserName = "charis@gmail.com"
                        });
                });

            modelBuilder.Entity("SerpantWebApp.Models.Attendance", b =>
                {
                    b.Property<int>("LessonSessionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseID")
                        .HasColumnType("int");

                    b.Property<bool>("Presence")
                        .HasColumnType("bit");

                    b.Property<int>("StudentID")
                        .HasColumnType("int");

                    b.HasKey("LessonSessionID");

                    b.HasIndex("CourseID");

                    b.HasIndex("StudentID");

                    b.ToTable("Attendance");
                });

            modelBuilder.Entity("SerpantWebApp.Models.AttendanceSheetForMath", b =>
                {
                    b.Property<int>("LessonSessionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CourseTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Presence")
                        .HasColumnType("bit");

                    b.Property<string>("StaffName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LessonSessionID");

                    b.ToTable("AttendanceSheetForMath");
                });

            modelBuilder.Entity("SerpantWebApp.Models.AttendanceSheetForProgramming", b =>
                {
                    b.Property<int>("LessonSessionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CourseTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Presence")
                        .HasColumnType("bit");

                    b.Property<string>("StaffName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LessonSessionID");

                    b.ToTable("AttendanceSheetForProgramming");
                });

            modelBuilder.Entity("SerpantWebApp.Models.Course", b =>
                {
                    b.Property<int>("CourseID")
                        .HasColumnType("int");

                    b.Property<int>("Credits")
                        .HasColumnType("int");

                    b.Property<int?>("TeacherStaffID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CourseID");

                    b.HasIndex("TeacherStaffID");

                    b.ToTable("Course");
                });

            modelBuilder.Entity("SerpantWebApp.Models.Student", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("EnrollmentDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("File")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("RoleID");

                    b.HasIndex("UserID");

                    b.ToTable("Student");
                });

            modelBuilder.Entity("SerpantWebApp.Models.Teacher", b =>
                {
                    b.Property<int>("StaffID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EnrollmentDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("File")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("StaffID");

                    b.HasIndex("UserID");

                    b.ToTable("Teacher");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("SerpantWebApp.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SerpantWebApp.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SerpantWebApp.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("SerpantWebApp.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SerpantWebApp.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SerpantWebApp.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SerpantWebApp.Models.Attendance", b =>
                {
                    b.HasOne("SerpantWebApp.Models.Course", "Course")
                        .WithMany("Attendances")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SerpantWebApp.Models.Student", "Student")
                        .WithMany("Attendances")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SerpantWebApp.Models.Course", b =>
                {
                    b.HasOne("SerpantWebApp.Models.Teacher", "Teacher")
                        .WithMany("Courses")
                        .HasForeignKey("TeacherStaffID");
                });

            modelBuilder.Entity("SerpantWebApp.Models.Student", b =>
                {
                    b.HasOne("SerpantWebApp.Models.ApplicationRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleID");

                    b.HasOne("SerpantWebApp.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("SerpantWebApp.Models.Teacher", b =>
                {
                    b.HasOne("SerpantWebApp.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserID");
                });
#pragma warning restore 612, 618
        }
    }
}
