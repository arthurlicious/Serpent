// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SerpantWebApp.Data;

namespace SerpantWebApp.Migrations
{
    [DbContext(typeof(SerpantWebAppContext))]
    [Migration("20220731083445_updateSeed4")]
    partial class updateSeed4
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.27")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "c15eeds50-9053-4323-53de23-dw32435f33",
                            RoleId = "fab4fac1-c546-41de-aebc-a14da6895711"
                        },
                        new
                        {
                            UserId = "b74ddd14-6340-4840-95c2-db12884843e5",
                            RoleId = "fab4fac1-c546-41de-aebc-a14da6895711"
                        },
                        new
                        {
                            UserId = "rrtetrere-f32g-s42q-f3232f-ecdsvd32433",
                            RoleId = "rewefac1-c53d-434f-a5gz-pet32gg95711"
                        },
                        new
                        {
                            UserId = "effin2343-3fzz-tg3f-2fsa3-eccafwee32433",
                            RoleId = "rewefac1-c53d-434f-a5gz-pet32gg95711"
                        },
                        new
                        {
                            UserId = "34dfwef33-y525f-h432-r32-evvvreze32433",
                            RoleId = "rewefac1-c53d-434f-a5gz-pet32gg95711"
                        },
                        new
                        {
                            UserId = "fet434t34-fwe3d-tu34f-fwe-owepopwefpf2423",
                            RoleId = "rewefac1-c53d-434f-a5gz-pet32gg95711"
                        },
                        new
                        {
                            UserId = "zdmmdf34-fewf3-geg2353-ppoe-fwekkv32ife",
                            RoleId = "c7b013f0-5201-4317-abd8-c211f91b7330"
                        },
                        new
                        {
                            UserId = "vre4yw-h563-g34y45h-fewf32-pqpfowef3",
                            RoleId = "c7b013f0-5201-4317-abd8-c211f91b7330"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("SerpantWebApp.Models.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IPAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "fab4fac1-c546-41de-aebc-a14da6895711",
                            ConcurrencyStamp = "1",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Admin",
                            NormalizedName = "Admin"
                        },
                        new
                        {
                            Id = "c7b013f0-5201-4317-abd8-c211f91b7330",
                            ConcurrencyStamp = "2",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Teacher",
                            NormalizedName = "Teacher"
                        },
                        new
                        {
                            Id = "rewefac1-c53d-434f-a5gz-pet32gg95711",
                            ConcurrencyStamp = "3",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Student",
                            NormalizedName = "Student"
                        });
                });

            modelBuilder.Entity("SerpantWebApp.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "b74ddd14-6340-4840-95c2-db12884843e5",
                            AccessFailedCount = 0,
                            Age = 0,
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "1849c155-a3b8-4df5-9c9d-726d1a765e99",
                            Email = "petertestacct3010@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "petertestacct3010@gmail.com",
                            NormalizedUserName = "petertestacct3010@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEJxlSLxy0WPlFvIukInUjcydPhX8iUQDKR8bhSznkB0mEojgK1K/z7Ogw5NfKXKTGg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e46ee65a-ee97-443f-bffb-721b5d913ab2",
                            TwoFactorEnabled = false,
                            UserName = "petertestacct3010@gmail.com"
                        },
                        new
                        {
                            Id = "c15eeds50-9053-4323-53de23-dw32435f33",
                            AccessFailedCount = 0,
                            Age = 0,
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "a6692fb3-9eae-4559-8448-7c12b4033501",
                            Email = "jamesTestAcct3010@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "jamesTestAcct3010@gmail.com",
                            NormalizedUserName = "jamesTestAcct3010@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEBrEaHk7Czx6ydzSmJSSN8lzoc6SFgx3N670MIUNyYV4VuiC321jIIzJOyDPGMlAmQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d14dc29e-a52f-40a8-a58a-bf67c35da8f8",
                            TwoFactorEnabled = false,
                            UserName = "jamesTestAcct3010@gmail.com"
                        },
                        new
                        {
                            Id = "rtweetwe1-3gre-yop2-verbm-rwerreww433",
                            AccessFailedCount = 0,
                            Age = 0,
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "62fa9502-9213-415b-9e9a-cc32f964eb17",
                            Email = "alexander@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "alexander@gmail.com",
                            NormalizedUserName = "alexander@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEIBCO5LdLhGQGg5Cb93NNX9b1NrT2cmQjk7XkiqxMc+2A371F6nHfSfO+0vR1r9n+w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f0dd7723-27c8-4776-a256-79e82d1e6b67",
                            TwoFactorEnabled = false,
                            UserName = "alexander@gmail.com"
                        },
                        new
                        {
                            Id = "rrtetrere-f32g-s42q-f3232f-ecdsvd32433",
                            AccessFailedCount = 0,
                            Age = 0,
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "b3c46f7f-36e8-4704-b860-6293417e697a",
                            Email = "mike@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "mike@gmail.com",
                            NormalizedUserName = "mike@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEEFsraDlRAmS8dP4D3sVx/243Imb3ZINcIWkqnXatON4CWNU6NWVUePJG1Vn8pr6zA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ade0aa25-54b7-446c-ae94-d3a64caeffe5",
                            TwoFactorEnabled = false,
                            UserName = "mike@gmail.com"
                        },
                        new
                        {
                            Id = "effin2343-3fzz-tg3f-2fsa3-eccafwee32433",
                            AccessFailedCount = 0,
                            Age = 0,
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "497c97f8-1658-4945-a0de-cc19c6112c81",
                            Email = "bob@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "bob@gmail.com",
                            NormalizedUserName = "bob@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEJRAw4+aplpPyFQZxrQDQHCEywAojO5GVTPBI0YRoMeXNM4VZdl9RobW6kfMzcSZaw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3e9f6159-f5e5-4766-b0ff-475ce8fcdfb0",
                            TwoFactorEnabled = false,
                            UserName = "bob@gmail.com"
                        },
                        new
                        {
                            Id = "34dfwef33-y525f-h432-r32-evvvreze32433",
                            AccessFailedCount = 0,
                            Age = 0,
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "3f69d827-f3ef-4f1d-8ea3-de1d50ee62eb",
                            Email = "hansel@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "hansel@gmail.com",
                            NormalizedUserName = "hansel@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAENJ9dZDPAS/l0m7zMf3FMH+Y48CODOGh9J8ivvHdWKz0EDiB5Ah98LRjCTryseidNQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6f77bd8d-aba2-4d59-8f13-2a0b2dc1c947",
                            TwoFactorEnabled = false,
                            UserName = "hansel@gmail.com"
                        },
                        new
                        {
                            Id = "fet434t34-fwe3d-tu34f-fwe-owepopwefpf2423",
                            AccessFailedCount = 0,
                            Age = 0,
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "9717a35f-977b-4be6-9c83-47ea458bf3a3",
                            Email = "grethel@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "grethel@gmail.com",
                            NormalizedUserName = "grethel@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEChFWcJRM2+7JuYAgckgbkwKZnOtHW0BN8NY2yQID63WE1wq0uUE756Wair8YOY0Tg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "26b1c95d-ad7e-453b-8b1f-70515a82e87b",
                            TwoFactorEnabled = false,
                            UserName = "grethel@gmail.com"
                        },
                        new
                        {
                            Id = "zdmmdf34-fewf3-geg2353-ppoe-fwekkv32ife",
                            AccessFailedCount = 0,
                            Age = 0,
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "221b9e7a-7e6a-4533-b47e-453251e190e4",
                            Email = "saiful@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "saiful@gmail.com",
                            NormalizedUserName = "saiful@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEIYX8I4fgTuOncwi6q1Hx+yZJx+sr1e3+s5JKUOZdFHuyurkQ23KQRDqRD3BwDegGA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "358a8f74-57a1-479b-9536-33f088ceb05d",
                            TwoFactorEnabled = false,
                            UserName = "saiful@gmail.com"
                        },
                        new
                        {
                            Id = "vre4yw-h563-g34y45h-fewf32-pqpfowef3",
                            AccessFailedCount = 0,
                            Age = 0,
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "5f251e8a-685a-4bc4-bf2b-8b4bdab2a82f",
                            Email = "charis@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "charis@gmail.com",
                            NormalizedUserName = "charis@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEHUAtcumpkH1DurSuczsgPARL/N8g3ZG5zPNrArrNONF5t7M8hGYnT3+IDKoRVlz7Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8e866d43-2e64-42c8-af6d-2ee1917e5c32",
                            TwoFactorEnabled = false,
                            UserName = "charis@gmail.com"
                        });
                });

            modelBuilder.Entity("SerpantWebApp.Models.Attendance", b =>
                {
                    b.Property<int>("LessonSessionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseID")
                        .HasColumnType("int");

                    b.Property<bool>("Presence")
                        .HasColumnType("bit");

                    b.Property<int>("StudentID")
                        .HasColumnType("int");

                    b.HasKey("LessonSessionID");

                    b.HasIndex("CourseID");

                    b.HasIndex("StudentID");

                    b.ToTable("Attendance");
                });

            modelBuilder.Entity("SerpantWebApp.Models.AttendanceSheetForMath", b =>
                {
                    b.Property<int>("LessonSessionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CourseTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Presence")
                        .HasColumnType("bit");

                    b.Property<string>("StaffName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LessonSessionID");

                    b.ToTable("AttendanceSheetForMath");
                });

            modelBuilder.Entity("SerpantWebApp.Models.AttendanceSheetForProgramming", b =>
                {
                    b.Property<int>("LessonSessionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CourseTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Presence")
                        .HasColumnType("bit");

                    b.Property<string>("StaffName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LessonSessionID");

                    b.ToTable("AttendanceSheetForProgramming");
                });

            modelBuilder.Entity("SerpantWebApp.Models.Course", b =>
                {
                    b.Property<int>("CourseID")
                        .HasColumnType("int");

                    b.Property<int>("Credits")
                        .HasColumnType("int");

                    b.Property<int?>("TeacherStaffID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CourseID");

                    b.HasIndex("TeacherStaffID");

                    b.ToTable("Course");
                });

            modelBuilder.Entity("SerpantWebApp.Models.Student", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("EnrollmentDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("File")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("RoleID");

                    b.HasIndex("UserID");

                    b.ToTable("Student");
                });

            modelBuilder.Entity("SerpantWebApp.Models.Teacher", b =>
                {
                    b.Property<int>("StaffID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EnrollmentDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("File")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("StaffID");

                    b.HasIndex("UserID");

                    b.ToTable("Teacher");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("SerpantWebApp.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SerpantWebApp.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SerpantWebApp.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("SerpantWebApp.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SerpantWebApp.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SerpantWebApp.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SerpantWebApp.Models.Attendance", b =>
                {
                    b.HasOne("SerpantWebApp.Models.Course", "Course")
                        .WithMany("Attendances")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SerpantWebApp.Models.Student", "Student")
                        .WithMany("Attendances")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SerpantWebApp.Models.Course", b =>
                {
                    b.HasOne("SerpantWebApp.Models.Teacher", "Teacher")
                        .WithMany("Courses")
                        .HasForeignKey("TeacherStaffID");
                });

            modelBuilder.Entity("SerpantWebApp.Models.Student", b =>
                {
                    b.HasOne("SerpantWebApp.Models.ApplicationRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleID");

                    b.HasOne("SerpantWebApp.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("SerpantWebApp.Models.Teacher", b =>
                {
                    b.HasOne("SerpantWebApp.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserID");
                });
#pragma warning restore 612, 618
        }
    }
}
